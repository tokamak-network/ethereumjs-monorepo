//DEBUG=ethjs,evm:ops:* tsx logicalOperation.ts
import { hexToBytes } from '@ethereumjs/util'

import { createEVM } from '../src/constructors.js'

const main = async () => {
  const evm = await createEVM()

  //   //단순 MUL 연산 테스트
  //   console.log('\nTesting Simple MUL Operations:')
  //   const simpleRes = await evm.runCode({
  //     code: hexToBytes('0x600360040200'), // PUSH1 3, PUSH1 4, MUL
  //   })

  //   const simpleStackValue = simpleRes.runState?.stack.peek(1)[0]
  //   console.log(`Simple MUL result (3 * 4): ${simpleStackValue}`)

  //복합 MUL 연산 테스트
  console.log('\nTesting Complex MUL Operations:')
  const res = await evm.runCode({
    code: hexToBytes(
      '0x6080604052348015600e575f80fd5b5061056b8061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063711e321514610038578063ab3ae25514610068575b5f80fd5b610052600480360381019061004d9190610357565b610084565b60405161005f9190610391565b60405180910390f35b610082600480360381019061007d9190610357565b6100a3565b005b5f8181548110610092575f80fd5b905f5260205f20015f915090505481565b5f811180156100b457506103e88111155b6100f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ea9061042a565b60405180910390fd5b6002811161014a575f8061010791906102e7565b5f5b81811015610144575f6001908060018154018082558091505060019003905f5260205f20015f90919091909150558080600101915050610109565b506102cf565b5f8167ffffffffffffffff81111561016557610164610448565b5b6040519080825280602002602001820160405280156101935781602001602082028036833780820191505090505b5090506001815f815181106101ab576101aa610475565b5b6020026020010181815250506001816001815181106101cd576101cc610475565b5b6020026020010181815250505f600290505b828110156102695761023d826002836101f891906104cf565b8151811061020957610208610475565b5b60200260200101518360018461021f91906104cf565b815181106102305761022f610475565b5b60200260200101516102d2565b8282815181106102505761024f610475565b5b60200260200101818152505080806001019150506101df565b505f8061027691906102e7565b5f5b828110156102cc575f82828151811061029457610293610475565b5b6020026020010151908060018154018082558091505060019003905f5260205f20015f90919091909150558080600101915050610278565b50505b50565b5f81836102df9190610502565b905092915050565b5080545f8255905f5260205f20908101906103029190610305565b50565b5b8082111561031c575f815f905550600101610306565b5090565b5f80fd5b5f819050919050565b61033681610324565b8114610340575f80fd5b50565b5f813590506103518161032d565b92915050565b5f6020828403121561036c5761036b610320565b5b5f61037984828501610343565b91505092915050565b61038b81610324565b82525050565b5f6020820190506103a45f830184610382565b92915050565b5f82825260208201905092915050565b7f496e707574206d757374206265206265747765656e203120616e64204d41585f5f8201527f4c494d4954000000000000000000000000000000000000000000000000000000602082015250565b5f6104146025836103aa565b915061041f826103ba565b604082019050919050565b5f6020820190508181035f83015261044181610408565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6104d982610324565b91506104e483610324565b92508282039050818111156104fc576104fb6104a2565b5b92915050565b5f61050c82610324565b915061051783610324565b925082820190508082111561052f5761052e6104a2565b5b9291505056fea2646970667358221220194aa7119818582435309c7a60e0ec1f60f1d9f24853aea843a9787a6a2c0d2164736f6c634300081a0033',
    ),
  })

  // 결과 출력
  console.log('\nStack-Placement Value Comparison Test')
  console.log('stack : ', res.runState?.stack)
  console.log('stackPt : ', res.runState?.stackPt)

  console.log(res.runState!.synthesizer)

  const placementsArray = Array.from(res.runState!.synthesizer.placements.values())

  console.log('placementsArray : ', placementsArray)

  // const lastPlacement = placementsArray[placementsArray.length - 1]
  // const lastOutPtValue = lastPlacement.outPts[lastPlacement.outPts.length - 1].valuestr

  // console.log(`Last Placement OutPt Value: ${lastOutPtValue}`)

  //생성된 모든 서킷 출력
  console.log('\nGenerated Circuits:')
  let index = 1
  for (const placement of placementsArray) {
    console.log(`\nCircuit ${index}:`)
    console.log(`Operation: ${placement.name}`)
    console.log(`Number of inputs: ${placement.inPts.length}`)
    console.log(`Number of outputs: ${placement.outPts.length}`)
    console.log(
      'Placement details:',
      JSON.stringify(
        placement,
        (key, value) => (typeof value === 'bigint' ? value.toString() : value),
        2,
      ),
    )

    index++
  }
  console.log('last stackPt value : ')
}

void main().catch((error) => {
  console.log('****ERROR*****')
  console.error(error)
  process.exit(1)
})
